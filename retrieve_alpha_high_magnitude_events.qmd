---
title: "Investigating alpha Estimation with Varied High Magnitude Events"
format: html
editor: visual
---

```{r}
# delete all objects in the environment
rm(list = ls())
```

```{r}
library(ETAS.inlabru)
library(tidyverse)
library(gridExtra)
library(reshape2)
library(ggridges)
library(ggdist)
```

```{r}
num.cores <- 12
future::plan(future::multisession, workers = num.cores)
INLA::inla.setOption(num.threads = num.cores)
```

```{r}
set.seed(123)
```

# Alpha

## Set True ETAS Parameters

```{r}
# set true ETAS parameters
true.param <- list(
  mu = 0.30106014, K = 0.13611399, alpha = 2.43945301,
  c = 0.07098607, p = 1.17838741
)
# set magnitude distribution parameter
beta.p <- 2.353157
# set cutoff magnitude
M0 <- 2.5
# set starting time of the synthetic catalogue
T1 <- 0
# set end time of the synthetic catalogue
T2 <- 365
```

```{r}
# a function to generate synthetic catalogues
generate_synthetic_catalogue <- function(
    theta,
    beta.p,
    M0,
    T1,
    T2,
    Ht = NULL) {
  # generate the catalogue-1 - it returns a list of data.frames
  synth.cat.list <- generate_temporal_ETAS_synthetic(
    theta = theta,
    beta.p = beta.p,
    M0 = M0,
    T1 = T1,
    T2 = T2,
    Ht = Ht
  )
  synth.cat.df <- do.call(rbind, synth.cat.list)
  return(synth.cat.df)
}
```

## Generate Synthetic Catalogues

```{r}
# create a dataframe containing the known events
known.events.df.1 <- data.frame(
  ts = c(T2 * 0.5),
  magnitudes = c(4)
)
# gerate the synthetic catalogue-1
synth.cat.df.1 <- generate_synthetic_catalogue(
  theta = true.param,
  beta.p = beta.p,
  M0 = M0,
  T1 = T1,
  T2 = T2,
  Ht = known.events.df.1
)
# create a dataframe containing the known events
known.events.df.2 <- data.frame(
  ts = c(T2 * 0.5),
  magnitudes = c(5)
)
# generate the catalogue-2
synth.cat.df.2 <- generate_synthetic_catalogue(
  theta = true.param,
  beta.p = beta.p,
  M0 = M0,
  T1 = T1,
  T2 = T2,
  Ht = known.events.df.2
)
# create a dataframe containing the known events
known.events.df.3 <- data.frame(
  ts = c(T2 * 0.5, T2 * 0.75),
  magnitudes = c(4, 4)
)
# generate the catalogue-3
synth.cat.df.3 <- generate_synthetic_catalogue(
  theta = true.param,
  beta.p = beta.p,
  M0 = M0,
  T1 = T1,
  T2 = T2,
  Ht = known.events.df.3
)
# create a dataframe containing the known events
known.events.df.4 <- data.frame(
  ts = c(T2 * 0.5, T2 * 0.75),
  magnitudes = c(4, 5)
)
# generate the catalogue-4
synth.cat.df.4 <- generate_synthetic_catalogue(
  theta = true.param,
  beta.p = beta.p,
  M0 = M0,
  T1 = T1,
  T2 = T2,
  Ht = known.events.df.4
)
# create a dataframe containing the known events
known.events.df.5 <- data.frame(
  ts = c(T2 * 0.5, T2 * 0.75),
  magnitudes = c(5, 5)
)
# generate the catalogue-5
synth.cat.df.5 <- generate_synthetic_catalogue(
  theta = true.param,
  beta.p = beta.p,
  M0 = M0,
  T1 = T1,
  T2 = T2,
  Ht = known.events.df.5
)
synth.cat.list <- list(
  synth.cat.df.1,
  synth.cat.df.2,
  synth.cat.df.3,
  synth.cat.df.4,
  synth.cat.df.5
)
```

```{r}
# find column names
colnames(synth.cat.df.1)
# [1] "ts" "magnitudes" "gen"
```

## Plot Synthetic Catalogues

```{r}
# create a function to plot the synthetic catalogues
plot_synthetic_catalogue <- function(synth.cat.df, title) {
  plt <- ggplot(synth.cat.df, aes(x = ts, y = magnitudes)) +
    geom_point() +
    # mark the events with magnitude greater than 5
    geom_point(
      data = synth.cat.df[synth.cat.df$magnitudes >= 5, ],
      aes(x = ts, y = magnitudes), color = "red"
    ) +
    theme_minimal() +
    xlab("Time [days]") +
    ylab("Magnitude") +
    labs(title = title)
  return(plt)
}
```

```{r}
# Generate plots
plots <- lapply(1:length(synth.cat.list), function(i) {
  title <- paste("Synthetic Catalogue", i)
  plot_synthetic_catalogue(synth.cat.list[[i]], title)
})
# Arrange the plots in a column
grid.arrange(grobs = plots, ncol = 1)
```

## Prepare the Data for Model Fitting

```{r}
# Sort each catalogue by occurrence time and add event identifier
synth.cat.list <- lapply(synth.cat.list, function(df) {
  df <- df[order(df$ts), ]
  df$idx.p <- seq_len(nrow(df))
  return(df)
})
```

## Model Fitting

```{r}
# set copula transformations list
link.f <- list(
  mu = \(x) gamma_t(x, 0.3, 0.6),
  K = \(x) unif_t(x, 0, 10),
  alpha = \(x) unif_t(x, 0, 10),
  c_ = \(x) unif_t(x, 0, 10),
  p = \(x) unif_t(x, 1, 10)
)

# set inverse copula transformations list
inv.link.f <- list(
  mu = \(x) inv_gamma_t(x, 0.3, 0.6),
  K = \(x) inv_unif_t(x, 0, 10),
  alpha = \(x) inv_unif_t(x, 0, 10),
  c_ = \(x) inv_unif_t(x, 0, 10),
  p = \(x) inv_unif_t(x, 1, 10)
)

# set up list of initial values
th.init <- list(
  th.mu = inv.link.f$mu(0.5),
  th.K = inv.link.f$K(0.1),
  th.alpha = inv.link.f$alpha(1),
  th.c = inv.link.f$c_(0.1),
  th.p = inv.link.f$p(1.1)
)

# set up list of bru options
bru.opt.list <- list(
  bru_verbose = 0, # type of visual output
  bru_max_iter = 70, # maximum number of iterations
  # bru_method = list(max_step = 0.5),
  bru_initial = th.init
) # parameters initial values
```

```{r}
# create a list of model fitting results
fit.list <- lapply(synth.cat.list, function(synth.cat.df) {
  # fit the model
  fit <- Temporal.ETAS(
    total.data = synth.cat.df,
    M0 = M0,
    T1 = T1,
    T2 = T2,
    link.functions = link.f,
    coef.t. = 1,
    delta.t. = 0.1,
    N.max. = 5,
    bru.opt = bru.opt.list
  )
  print("finish...")
  return(fit)
})
```

```{r}
# create a list of model fitting results
input_lists <- lapply(1:length(synth.cat.list), function(i) {
  list(
    model.fit = fit.list[[i]],
    link.functions = link.f
  )
})

# retrieve marginal posterior distributions and set model identifier
post_lists <- lapply(1:length(synth.cat.list), function(i) {
  post.list <- get_posterior_param(input.list = input_lists[[i]])
  post.list$post.df$cat.used <- as.character(i)
  return(post.list)
})

# bind marginal posterior data.frames
bind.post.df <- do.call(rbind, lapply(post_lists, function(x) x$post.df))
```

```{r}
# plot them
ggplot(bind.post.df, aes(
  x = x, y = y,
  color = cat.used, linetype = cat.used
)) +
  geom_line() +
  facet_wrap(facets = ~param, scales = "free") +
  xlab("param") +
  ylab("pdf") +
  geom_vline(
    data = df.true.param,
    mapping = aes(xintercept = x), linetype = 2
  )
```

## Plot the Marginal Posteriors (alpha)

```{r}
# plot the marginal posteriors of alpha
ggplot(
  bind.post.df[bind.post.df$param == "alpha", ],
  aes(x = x, y = y, color = cat.used, linetype = cat.used)
) +
  geom_line() +
  xlab("alpha") +
  ylab("pdf") +
  geom_vline(
    data = df.true.param[df.true.param$param == "alpha", ],
    mapping = aes(xintercept = x), linetype = 2
  )
```

```{r}
# Plot the marginal posteriors of alpha
ggplot(
  bind.post.df[bind.post.df$param == "alpha", ],
  aes(x = x, y = y, color = cat.used, linetype = cat.used)
) +
  geom_line(size = 1) +
  xlab(expression(alpha)) +
  ylab("Density") +
  geom_vline(
    data = df.true.param[df.true.param$param == "alpha", ],
    mapping = aes(xintercept = x), linetype = 2, color = "black", size = 0.8
  ) +
  scale_color_discrete(name = "Category") +
  scale_linetype_discrete(name = "Category") +
  theme_minimal() +
  theme(
    text = element_text(size = 14, family = "serif"),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.position = "bottom",
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_line(color = "grey90")
  ) +
  ggtitle("Marginal Posterior Distributions of Alpha")
```

```{r}
# Plot the marginal posteriors of alpha with additional visual enhancements
ggplot(bind.post.df[bind.post.df$param == "alpha", ], aes(x = x, y = cat.used)) +
  stat_slab(aes(fill = after_stat(level)), .width = c(.66, .95, .99, 1)) +
  stat_pointinterval() +
  scale_fill_brewer(palette = "Blues", na.translate = FALSE, name = "Credible Level") +
  geom_vline(
    data = df.true.param[df.true.param$param == "alpha", ],
    aes(xintercept = x), linetype = 2, color = "red", size = 1
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 14, family = "serif"),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.position = "bottom",
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_line(color = "grey90")
  ) +
  labs(
    x = expression(alpha),
    y = "Category Used",
    title = "Marginal Posterior Distributions of Alpha",
    fill = "Credible Interval"
  )
```

```{r}
library(ggplot2)
library(ggdist)

# Plot the marginal posteriors for all parameters with facets
ggplot(bind.post.df, aes(x = x, y = cat.used)) +
  stat_slab(aes(fill = after_stat(level)), .width = c(.66, .95, .99, 1)) +
  stat_pointinterval() +
  scale_fill_brewer(palette = "Blues", na.translate = FALSE, name = "Credible Level") +
  geom_vline(
    data = df.true.param,
    aes(xintercept = x), linetype = 2, color = "red", size = 1
  ) +
  theme_minimal() +
  theme(
    text = element_text(size = 14, family = "serif"),
    legend.title = element_text(size = 12, face = "bold"),
    legend.text = element_text(size = 10),
    legend.position = "top",
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text = element_text(size = 12),
    panel.grid.major = element_line(color = "grey80"),
    panel.grid.minor = element_line(color = "grey90"),
    strip.text = element_text(size = 12, face = "bold")
  ) +
  labs(
    x = expression(alpha),
    y = "Category Used",
    title = "Marginal Posterior Distributions",
    fill = "Credible Interval"
  ) +
  facet_wrap(~param, scales = "free", ncol = 3)

```
